#
# For full config options, check the docs:
#    docs.serverless.com


service: slack-timereporter

custom:
  # Log all events to CloudWatch
  slack_enable_logging: true

  # Dynamodb tables 
  reports_table_name: reports
  pauses_table_name: pauses

  # The path used to post Slack events to
  slack_event_path: slack

  # The path used to install the Slack App
  slack_install_path: slack

  # The path to redirect to after an install
  slack_install_redirect: https://slack.com

  # Verification token
  slack_verification_token: '${SLACK_VERIFICATION_TOKEN}'            
  
  # Space delimited scopes
  slack_client_scopes: "bot commands incoming-webhook"
  
  # Client ID - quotes required
  slack_client_id: '${SLACK_CLIENT_ID}'
  
  # Client Secret - quotes required
  slack_client_secret: '${SLACK_CLIENT_SECRET}'
  

provider:
  name: aws
  runtime: nodejs8.10
  profile: default
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"
  environment:
    TABLE_NAME: ${self:custom.slack_table_name}
    CLIENT_ID: ${self:custom.slack_client_id}
    CLIENT_SECRET: ${self:custom.slack_client_secret}
    CLIENT_SCOPES: ${self:custom.slack_client_scopes}
    INSTALL_REDIRECT: ${self:custom.slack_install_redirect}
    VERIFICATION_TOKEN: ${self:custom.slack_verification_token}
    ENABLE_LOGGING: ${self:custom.slack_enable_logging}


functions:
  slack:
    handler: src/index.handler
    events:
      ## Slash Commands, Events, and Interactive Messages
      - http:
          path: ${self:custom.slack_event_path}
          method: post
          integration: lambda
          response:
            template: $input.path('$')
      
      ## OAuth Routes      
      - http:
          path: ${self:custom.slack_install_path}
          method: get
          integration: lambda
          request:
            parameters:
              querystrings:
                code: true
                state: true
          response:
            statusCodes:
              201:
                pattern: ''
              301:
                pattern: http.*
                headers:
                  Location: integration.response.body.errorMessage
                  Cache-Control: "'no-cache, no-store, must-revalidate'"      


resources:
  Resources:
    TeamsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.reports_table_name}

      TeamsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.pauses_table_name}
